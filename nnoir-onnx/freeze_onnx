#!/usr/bin/env python3
from typing import Dict, Set

import argparse
import onnx


def list_variables(model) -> Set[str]:
    s = set()
    for x in model.graph.input:
        if x.type.HasField('tensor_type'):
            for dim in x.type.tensor_type.shape.dim:
                if dim.HasField('dim_param'):
                    s.add(dim.dim_param)
    return s


def command_list(args) -> None:
    model = onnx.load(args.input)
    s = list_variables(model)
    if len(s) != 0:
        print(s)


def command_freeze(args) -> None:
    model = onnx.load(args.input)
    s = list_variables(model)
    diff = s.difference(set(args.fix_dimension.keys()))
    if len(diff) != 0:
        print("missing variables: " + str(diff))
        return

    for x in model.graph.input:
        if x.type.HasField('tensor_type'):
            for dim in x.type.tensor_type.shape.dim:
                if dim.HasField('dim_param'):
                    v = dim.dim_param
                    dim.ClearField('dim_param')
                    dim.dim_value = args.fix_dimension[v]
    onnx.save(model, args.output)


def parse_assign(s: str) -> Dict[str, int]:
    d: Dict[str, int] = dict()
    item: str
    for item in s.split(','):
        [v, n] = item.split('=')
        d[v] = int(n)
    return d


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='ONNX Freezer')
    subparsers = parser.add_subparsers()

    # freeze
    parser_freeze = subparsers.add_parser('freeze', help='create freezed (statically sized) onnx')
    parser_freeze.add_argument('-o', '--output', dest='output', type=str, required=True,
                               metavar='NNOIR', help='output(NNOIR) file path')
    parser_freeze.add_argument('--fix-dimension', type=parse_assign, dest='fix_dimension', required=True,
                               help='assign statically unknown variables (like W=2,H=4. Cannot include spaces)')
    parser_freeze.add_argument(dest='input', type=str,
                               metavar='ONNX', help='input(ONNX) file path')
    parser_freeze.set_defaults(handler=command_freeze)

    # list
    parser_list = subparsers.add_parser('list', help='list all statically unknown sized variables')
    parser_list.add_argument(dest='input', type=str,
                             metavar='ONNX', help='input(ONNX) file path')

    parser_list.set_defaults(handler=command_list)

    args = parser.parse_args()
    if hasattr(args, 'handler'):
        args.handler(args)
    else:
        parser.print_help()
