version: 2.1

references:

  defaults: &defaults
    docker:
      - image: python:3.9-buster
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    environment:
      TZ: "/usr/share/zoneinfo/Asia/Tokyo"

commands:

  install-python-dev-tools:
    steps:
      - run:
          name: Install python dev tools and dependencies
          command: |
            apt-get update
            apt-get install -y --no-install-recommends python3-pip

  poetry-install:
    parameters:
      dir:
        type: string
    steps:
      - install-python-dev-tools
      - run:
          name: install poetry
          command: |
            curl -sSL https://install.python-poetry.org | python -
            echo 'export PATH=$HOME/.local/bin:$PATH' >> $BASH_ENV
            source $BASH_ENV
            poetry config virtualenvs.in-project true
      - run:
          name: poetry install in << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry install --no-ansi

  lint:
    parameters:
      dir:
        type: string
    steps:
      - run:
          name: Lint << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry run pysen run lint

  validate-version-with-tag:
    parameters:
      dir:
        type: string
      package-name:
        type: string
    steps:
      - run:
          name: Check if git tag name is appropriate for package version
          working_directory: << parameters.dir >>
          command: |
            TAG=$(echo ${CIRCLE_TAG} |sed -e 's/<< parameters.package-name >>-//')
            VERSION=$(poetry run python -c 'import pkg_resources; print(pkg_resources.get_distribution("<< parameters.package-name >>").version)')
            echo "Git tag: $TAG"
            echo "Package version: $VERSION"
            test "$VERSION" = "$TAG"

  docker-login:
    steps:
      - run:
          name: Login to docker registry
          command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}


jobs:
  check-nnoir:
    <<: *defaults
    steps:
      - checkout
      - poetry-install:
          dir: nnoir
      - lint:
          dir: nnoir
      - run:
          name: Test nnoir
          working_directory: nnoir
          command: |
            poetry run pytest -v

  check-nnoir-onnx:
    <<: *defaults
    steps:
      - checkout
      - poetry-install:
          dir: nnoir-onnx
      - lint:
          dir: nnoir-onnx
      - run:
          name: Test nnoir-onnx
          working_directory: nnoir-onnx
          command: |
            poetry run pytest -v
      - run:
          name: Test nnoir-onnx example
          working_directory: nnoir-onnx
          command: |
            poetry run make -C example/mobilenetv2
            poetry run make -C example/super_resolution

  check-nnoir-chainer:
    <<: *defaults
    steps:
      - checkout
      - poetry-install:
          dir: nnoir-chainer
      - lint:
          dir: nnoir-chainer
      - run:
          name: Test nnoir-chainer library
          working_directory: nnoir-chainer
          command: |
            poetry run pytest -v
      - run:
          name: Test nnoir-chainer example
          working_directory: nnoir-chainer
          command: |
            poetry run make -C example/mnist

  check-blackonnx:
    <<: *defaults
    steps:
      - checkout
      - poetry-install:
          dir: blackonnx
      - lint:
          dir: blackonnx
      - run:
          name: Test blackonnx example & test
          working_directory: blackonnx
          command: |
            poetry run make -C examples/models -j2
            poetry run make -C test -j2

  build-dockerimage:
    parameters:
      release:
        type: boolean
    docker:
      - image: nixos/nix:2.8.1
        auth: &docker-hub-auth
          username: $DOCKER_USER
          password: $DOCKER_PASS
    environment:
      TZ: "JST-9"
    steps:
      - checkout
      - run:
          name: Build docker image
          command: |
            nix --experimental-features 'nix-command flakes' build '.#dockerimage' -o image -L
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Install docker client
          command: |
            nix-env -iA nixpkgs.docker-client
      - docker-login
      - run:
          name: Load image
          command: |
            docker load < ./image
      - when:
          condition: << parameters.release >>
          steps:
            - run:
                name: Change image tag
                command: |
                  docker tag idein/nnoir-tools:latest idein/nnoir-tools:$(date +%Y%m%d)
                  docker images
            - run:
                name: Push image
                command: |
                  docker push idein/nnoir-tools:latest
                  docker push idein/nnoir-tools:$(date +%Y%m%d)
      - unless:
          condition: << parameters.release >>
          steps:
            - run:
                name: Change image tag
                command: |
                  docker tag idein/nnoir-tools:latest idein/nnoir-tools:build-${CIRCLE_BUILD_NUM}
                  docker images
            - run:
                name: Push image
                command: |
                  docker push idein/nnoir-tools:latest
                  docker push idein/nnoir-tools:build-${CIRCLE_BUILD_NUM}

  release-nnoir:
    <<: *defaults
    parameters:
      dir:
        type: string
      package-name:
        type: string
    steps:
      - checkout
      - poetry-install:
          dir: << parameters.dir >>
      - validate-version-with-tag:
          dir: << parameters.dir >>
          package-name: << parameters.package-name >>
      - run:
          name: Publish << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN_NNOIR" --no-interaction


  release-nnoir-onnx:
    <<: *defaults
    parameters:
      dir:
        type: string
      package-name:
        type: string
    steps:
      - checkout
      - poetry-install:
          dir: << parameters.dir >>
      - validate-version-with-tag:
          dir: << parameters.dir >>
          package-name: << parameters.package-name >>
      - run:
          name: Publish << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN_NNOIR_ONNX" --no-interaction


  release-nnoir-chainer:
    <<: *defaults
    parameters:
      dir:
        type: string
      package-name:
        type: string
    steps:
      - checkout
      - poetry-install:
          dir: << parameters.dir >>
      - validate-version-with-tag:
          dir: << parameters.dir >>
          package-name: << parameters.package-name >>
      - run:
          name: Publish << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN_NNOIR_CHAINER" --no-interaction


  release-blackonnx:
    <<: *defaults
    parameters:
      dir:
        type: string
      package-name:
        type: string
    steps:
      - checkout
      - poetry-install:
          dir: << parameters.dir >>
      - validate-version-with-tag:
          dir: << parameters.dir >>
          package-name: << parameters.package-name >>
      - run:
          name: Publish << parameters.dir >>
          working_directory: << parameters.dir >>
          command: |
            poetry publish --build --username "__token__" --password "$PYPI_API_TOKEN_BLACKONNX" --no-interaction



workflows:
  version: 2

  test:
    jobs: &test-only-workflow
      - check-nnoir:
          context:
            - docker-hub-creds
      - check-nnoir-onnx:
          context:
            - docker-hub-creds
      - check-nnoir-chainer:
          context:
            - docker-hub-creds
      - check-blackonnx:
          context:
            - docker-hub-creds
      - build-dockerimage:
          release: false
          context:
            - docker-hub-creds

  nightly:
    triggers:
      - schedule:
          cron: "0 16 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *test-only-workflow

  release-nnoir:
    jobs:
      - release-nnoir:
          context:
            - docker-hub-creds
          filters: &nnoir-release-filter
            tags:
              only: /^nnoir-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
          dir: nnoir
          package-name: nnoir
      - build-dockerimage:
          release: true
          context:
            - docker-hub-creds
          requires:
            - release-nnoir
          filters: *nnoir-release-filter

  release-nnoir-onnx:
    jobs:
      - release-nnoir-onnx:
          context:
            - docker-hub-creds
          filters: &nnoir-onnx-release-filter
            tags:
              only: /^nnoir-onnx-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
          dir: nnoir-onnx
          package-name: nnoir-onnx
      - build-dockerimage:
          release: true
          context:
            - docker-hub-creds
          requires:
            - release-nnoir-onnx
          filters: *nnoir-onnx-release-filter

  release-nnoir-chainer:
    jobs:
      - release-nnoir-chainer:
          context:
            - docker-hub-creds
          filters:
            tags:
              only: /^nnoir-chainer-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
          dir: nnoir-chainer
          package-name: nnoir-chainer

  release-blackonnx:
    jobs:
      - release-blackonnx:
          context:
            - docker-hub-creds
          filters:
            tags:
              only: /^blackonnx-[0-9]+(\.[0-9]+){2}((a|b|rc)[0-9]+)?(.post[0-9])?(.dev[0-9])?$/
            branches:
              ignore: /.*/
          dir: blackonnx
          package-name: blackonnx
